#(a)
import qiskit
import numpy
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
from numpy.random import randint
q = QuantumRegister(4)
c = ClassicalRegister(4)
circuit = QuantumCircuit(q,c)
circuit.initialize((1/6,1/sqrt(18),1/sqrt(12),1/sqrt(9),1/sqrt(36/5),1/sqrt(6),1/sqrt(36/7),1/sqrt(36/8),0,0,0,0,0,0,0,0))
circuit.x(q[0])
circuit.x(q[3])
circuit.h(q[3])
circuit.mct(list(range(3)),q[3])
circuit.x(q[0])
#circuit.measure(q,c)
circuit.draw(output = 'mpl')
simulator = Aer.get_backend('statevector_simulator')
job = execute(circuit, simulator)
result = job.result()
statevector = result.get_statevector()
print(statevector)
#(b)
import qiskit
import numpy
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
from numpy.random import randint
q = QuantumRegister(4)
c = ClassicalRegister(4)
circuit = QuantumCircuit(q,c)
circuit.h(q[0:3])
circuit.x(q[0:3])
circuit.h(q[2])
circuit.mct(list(range(2)),q[2])
circuit.h(q[2])
circuit.x(q[0:3])
circuit.h(q[0:3])
circuit.draw(output = 'mpl')
#(c)
import qiskit
import numpy
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
from numpy.random import randint
n = 5
q = QuantumRegister(n)
c = ClassicalRegister(n)
circuit = QuantumCircuit(q,c)
circuit.x(q[n-1])
circuit.h(q)
circuit.barrier(q)

circuit.x(q[0])

circuit.mct(list(range(n-1)),q[n-1])
circuit.x(q[0])
circuit.barrier(q)
circuit.h(q[0:n-1])
circuit.x(q[0:n-1])
circuit.h(q[n-2])
circuit.mct(list(range(n-2)),q[n-2])
circuit.h(q[n-2])
circuit.x(q[0:n-1])
circuit.h(q[0:n-1])
circuit.barrier(q)
circuit.x(q[0])

circuit.mct(list(range(n-1)),q[n-1])
circuit.x(q[0])
circuit.barrier(q)
circuit.h(q[0:n-1])
circuit.x(q[0:n-1])
circuit.h(q[n-2])
circuit.mct(list(range(n-2)),q[n-2])
circuit.h(q[n-2])
circuit.x(q[0:n-1])
circuit.h(q[0:n-1])
circuit.barrier(q)
circuit.measure(q[0:n-1],c[0:n-1])
circuit.draw(output = 'mpl')
simulator = Aer.get_backend('qasm_simulator')
job = execute(circuit, simulator)
result = job.result()
counts = result.get_counts()
plot_histogram(counts)
#(d)
import qiskit
import numpy
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
from numpy.random import randint
n = 4
q = QuantumRegister(n)
c = ClassicalRegister(n)
circuit = QuantumCircuit(q,c)
circuit.initialize((1/6,1/sqrt(18),1/sqrt(12),1/sqrt(9),1/sqrt(36/5),1/sqrt(6),1/sqrt(36/7),1/sqrt(36/8),0,0,0,0,0,0,0,0))
circuit.h(q[2])
circuit.cx(q[0],q[2])
circuit.h(q[2])
circuit.barrier(q)
circuit.h(q[2])
circuit.cx(q[1],q[2])
circuit.h(q[2])
circuit.draw(output = 'mpl')
simulator = Aer.get_backend('statevector_simulator')
job = execute(circuit, simulator)
result = job.result()
statevector = result.get_statevector()
print(statevector)
#(e)
import qiskit
import numpy
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
from numpy.random import randint
n = 4
q = QuantumRegister(n)
c = ClassicalRegister(n)
circuit = QuantumCircuit(q,c)
circuit.x(q[n-1])
circuit.h(q)
circuit.barrier(q)
circuit.h(q[2])
circuit.cx(q[0],q[2])
circuit.h(q[2])
circuit.barrier(q)
circuit.h(q[2])
circuit.cx(q[1],q[2])
circuit.h(q[2])
circuit.barrier(q)
circuit.h(q[0:n-1])
circuit.x(q[0:n-1])
circuit.h(q[n-2])
circuit.mct(list(range(n-2)),q[n-2])
circuit.h(q[n-2])
circuit.x(q[0:n-1])
circuit.h(q[0:n-1])
circuit.barrier(q)
circuit.measure(q[0:n-1],c[0:n-1])
circuit.draw(output = 'mpl')
simulator = Aer.get_backend('qasm_simulator')
job = execute(circuit, simulator)
result = job.result()
counts = result.get_counts()
plot_histogram(counts)
#(f)
import qiskit
import numpy
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
from numpy.random import randint
n = 4
q = QuantumRegister(n)
c = ClassicalRegister(n)
circuit = QuantumCircuit(q,c)
circuit.x(q[n-1])
circuit.h(q)
circuit.barrier(q)
circuit.h(q[2])
circuit.cx(q[0],q[2])
circuit.h(q[2])
circuit.barrier(q)
circuit.h(q[2])
circuit.cx(q[1],q[2])
circuit.h(q[2])
circuit.barrier(q)
circuit.h(q[0])
circuit.cx(q[1],q[0])
circuit.h(q[0])
circuit.barrier(q)
circuit.h(q[0:n-1])
circuit.x(q[0:n-1])
circuit.h(q[n-2])
circuit.mct(list(range(n-2)),q[n-2])
circuit.h(q[n-2])
circuit.x(q[0:n-1])
circuit.h(q[0:n-1])
circuit.barrier(q)
circuit.measure(q[0:n-1],c[0:n-1])
circuit.draw(output = 'mpl')
simulator = Aer.get_backend('qasm_simulator')
job = execute(circuit, simulator)
result = job.result()
counts = result.get_counts()
plot_histogram(counts)
#bonus
import qiskit
import numpy
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
from numpy.random import randint
n = 5
q = QuantumRegister(n)
c = ClassicalRegister(n)
circuit = QuantumCircuit(q,c)
#circuit.x(q[n-1])
circuit.h(q)
circuit.barrier(q)
circuit.h(q[2])
circuit.cx(q[0],q[2])
circuit.h(q[2])
circuit.barrier(q)
circuit.h(q[0:n-1])
circuit.x(q[0:n-1])
circuit.h(q[n-2])
circuit.mct(list(range(n-2)),q[n-2])
circuit.h(q[n-2])
circuit.x(q[0:n-1])
circuit.h(q[0:n-1])
circuit.barrier(q)

circuit.measure(q[0:n-1],c[0:n-1])
circuit.draw(output = 'mpl')
simulator = Aer.get_backend('qasm_simulator')
job = execute(circuit, simulator)
result = job.result()
counts = result.get_counts()
plot_histogram(counts)
