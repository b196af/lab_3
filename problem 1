#(a)
#(i)
import qiskit
import numpy
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
from numpy.random import randint
q = QuantumRegister(5)
c = ClassicalRegister(5)
circuit = QuantumCircuit(q,c)
circuit.h(q)
circuit.h(q[4])
circuit.measure(q[4],c[4])
circuit.draw(output = 'mpl')
simulator = Aer.get_backend('qasm_simulator')
job = execute(circuit, simulator)
result = job.result()
counts = result.get_counts()
plot_histogram(counts)
#(ii)
import qiskit
import numpy
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
from numpy.random import randint
q = QuantumRegister(5)
c = ClassicalRegister(5)
circuit = QuantumCircuit(q,c)
circuit.h(q)
circuit.h(q[4])
circuit.x(q[4])
circuit.measure(q[4],c[4])
circuit.draw(output = 'mpl')
simulator = Aer.get_backend('qasm_simulator')
job = execute(circuit, simulator)
result = job.result()
counts = result.get_counts()
plot_histogram(counts)
#(iii)
import qiskit
import numpy
import numpy as np
from qiskit import *
from qiskit.visualization import plot_histogram, plot_bloch_vector , plot_bloch_multivector
from math import sqrt, pi
from qiskit import QuantumCircuit, execute, Aer, assemble
from numpy.random import randint
q = QuantumRegister(5)
c = ClassicalRegister(5)
circuit = QuantumCircuit(q,c)
circuit.h(q)
circuit.h(q[4])
circuit.cx(q[0],q[4])
circuit.cx(q[1],q[4])
circuit.cx(q[2],q[4])
circuit.cx(q[3],q[4])
circuit.measure(q[4],c[4])
circuit.draw(output = 'mpl')
simulator = Aer.get_backend('qasm_simulator')
job = execute(circuit, simulator)
result = job.result()
counts = result.get_counts()
plot_histogram(counts)
#(b)
